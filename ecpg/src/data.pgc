#include <common.h>
#include <math.h>
#include<stdlib.h>

	EXEC SQL BEGIN DECLARE SECTION;
    	EXEC SQL INCLUDE <tables.h>;
   	
	  CONT_T   cont_t; 
   	  float total;
	  int offset=1;
	  int limit=5;	  
	EXEC SQL END   DECLARE SECTION; 
	int currpage=1;
	
 listAll()
 {
   	connected();
  
   	  memset(&cont_t, 0,  CONT_SIZE);
	EXEC SQL DECLARE cont_cur CURSOR WITH HOLD FOR

		SELECT * FROM vary_content ORDER BY cont_id DESC LIMIT :limit;

	EXEC SQL OPEN cont_cur; 
    	header();
      	while(1)
	{
          memset(&cont_t, 0x00,  CONT_SIZE);
          EXEC SQL FETCH cont_cur
          INTO
            :cont_t.cont_id,
            :cont_t.cont_title,
            :cont_t.cont_des,
            :cont_t.cont_date;

  	  if (SQLCODE == 100)
	  {
            break;    
          }
	  else if (SQLCODE)
	  {
            printf("<%s:%d> SQLERR %d:%s\n", PGM, LIN, SQLCODE, SQLERRM);
            break;    
          } 
	body(cont_t);
	}	
    	  EXEC SQL CLOSE cont_cur;
    	  EXEC SQL DISCONNECT ALL;
	currpage=1;
	printPage();

 }

 insert()
 {
	printf("Insert Title\n");
	scanf("%s",&cont_t.cont_title);
	printf("Insert Description\n");
	scanf("%s",&cont_t.cont_des);
	
	connected();
	
	EXEC SQL INSERT INTO vary_content VALUES(
		nextval('ry_seq_id'),
		:cont_t.cont_title,
		:cont_t.cont_des,
		NOW());
	EXEC SQL COMMIT;
	EXEC SQL DISCONNECT ALL;

 }

 update()
 {
	printf("Update input id:\n");
	scanf("%d",&cont_t.cont_id);
	printf("Update title: ");
	scanf("%s",&cont_t.cont_title);
	printf("Update Description: ");
	scanf("%s",&cont_t.cont_des);
	
	connected();

	EXEC SQL UPDATE vary_content SET
	    cont_title=	:cont_t.cont_title,
	    cont_des=	:cont_t.cont_des,
	    cont_date= NOW()
	    WHERE cont_id =:cont_t.cont_id;
	EXEC SQL COMMIT;
	EXEC SQL DISCONNECT ALL;

 }

 delete()
 {
	printf("Input ID to delete: ");
	scanf("%d",&cont_t.cont_id);

	EXEC SQL BEGIN DECLARE SECTION;

 	  const char *sql="DELETE FROM vary_content WHERE cont_id=?;";

	EXEC SQL END DECLARE SECTION;
	
	connected();

	EXEC SQL PREPARE pst FROM :sql;
	EXEC SQL EXECUTE pst USING :cont_t.cont_id;
//	  printf("DELETE DONE!\n");
	EXEC SQL COMMIT;
	
	EXEC SQL DISCONNECT ALL;

 }
 next()
 {
	int page;	
	page=getTotalPage();
	currpage++;
	if(currpage > page)
	{
	  currpage=page;
	}
	offset=limit*(currpage-1);
	connected();
	EXEC SQL DECLARE cur CURSOR WITH HOLD FOR
		SELECT * FROM vary_content ORDER BY cont_id DESC LIMIT :limit OFFSET :offset;
	EXEC SQL OPEN cur;
	header();
	while(1)
	{
	  memset(&cont_t,0,CONT_SIZE);
	  EXEC SQL FETCH cur
	  INTO
	   :cont_t.cont_id,
	   :cont_t.cont_title,
	   :cont_t.cont_des,
	   :cont_t.cont_date;
	   if(sqlca.sqlcode==100)break;
	   if(SQLCODE)
	   {
		break;
	   }
	   body(cont_t);
	}
 
	EXEC SQL CLOSE cur;
	EXEC SQL DISCONNECT ALL;

	printPage();
 }

 prev()
 {	
	currpage--;
	if(currpage < 1)
	{
	  currpage=1;
	}
	offset=limit*(currpage-1);
	connected();
	EXEC SQL DECLARE cur_pre CURSOR WITH HOLD FOR
		SELECT * FROM vary_content ORDER BY cont_id DESC LIMIT :limit OFFSET :offset;
	EXEC SQL OPEN cur_pre;
	header();
	while(1)
	{
	  memset(&cont_t,0,CONT_SIZE);
	  EXEC SQL FETCH cur_pre
	  INTO
	   :cont_t.cont_id,
	   :cont_t.cont_title,
	   :cont_t.cont_des,
	   :cont_t.cont_date;
	   if(sqlca.sqlcode==100)break;
	   if(SQLCODE)
	   {
		break;
	   }
	   body(cont_t);
	}
 
	EXEC SQL CLOSE cur_pre;
	EXEC SQL DISCONNECT ALL;

	printPage();

 }
 first()
 {
	connected();
	EXEC SQL DECLARE cur_st CURSOR WITH HOLD FOR
	  SELECT * FROM vary_content ORDER BY cont_id DESC LIMIT :limit OFFSET 0;
	EXEC SQL OPEN cur_st;
	header();
	while(1)
	{
	  memset(&cont_t,0,CONT_SIZE);
	  EXEC SQL FETCH cur_st
	  INTO
	   :cont_t.cont_id,
	   :cont_t.cont_title,
	   :cont_t.cont_des,
	   :cont_t.cont_date;

	  if(SQLCODE)break;
	  body(cont_t);
	}   
	
	EXEC SQL CLOSE cur_st;
	EXEC SQL DISCONNECT ALL;
	currpage=1;
	printPage();
 }
 
 last()
 {
 	int page;
	page=getTotalPage();
	offset=(page-1)*limit;
	connected();
	EXEC SQL DECLARE cur_last CURSOR WITH HOLD FOR
		SELECT * FROM vary_content ORDER BY cont_id DESC LIMIT :limit OFFSET :offset;
	EXEC SQL OPEN cur_last;
	header();
	while(1)
	{
	  memset(&cont_t,0,CONT_SIZE);
	  EXEC SQL FETCH cur_last
	  INTO
	   :cont_t.cont_id,
	   :cont_t.cont_title,	   
	   :cont_t.cont_des,
	   :cont_t.cont_date;
	   if(SQLCODE)break;
	   body(cont_t);
	}

	EXEC SQL CLOSE cur_last;
	EXEC SQL DISCONNECT ALL;
	currpage=page;
	printPage();
 }
 setrow()
 {
	printf("Set row: ");
	scanf("%d",&limit);
	listAll();
 }

 header()
 {  

	printf("\n\n+============+============+=================+============+\n");
	printf("|%-12s|%-12s|%-17s|%-12s|\n","No","TITLE","DESC","DATE");
	printf("+============+============+=================+============+\n");
 }

 body(CONT_T cont_t)
 {

	printf("|%-12d|%-12.10s|%-17.10s|%-12s|\n", 
        cont_t.cont_id,
        cont_t.cont_title,
        cont_t.cont_des,
        cont_t.cont_date
        );
  
	printf("+------------+------------+-----------------+------------+\n");
 
	

 }

 int getTotalPage()
 {

	EXEC SQL BEGIN DECLARE SECTION;

	  const char *sql="SELECT COUNT(*) FROM vary_content";
	
	EXEC SQL END DECLARE SECTION;
	
	connected();
 
	EXEC SQL PREPARE ex FROM :sql;
	EXEC SQL EXECUTE ex INTO :total;
	EXEC SQL DISCONNECT ALL;
   
  	return ceil(total/limit);
 }

 printPage()
 {
	int getpage=getTotalPage();
	printf("%.0f %-45s",total,"records");
	printf("%d of %d page\n",currpage,getpage);

 }
 jumpTo()
 {
	printf("Jump page: ");
	scanf("%d",&currpage);
	currpage-=1;
	next();

 }
 connected()
 {

	EXEC SQL CONNECT TO "tcp:postgresql://localhost:5432/testdb" USER "testuser" USING '123';

 } 
 main()
 {
	listAll();
	do
	{	
	  char menu;
	  printf("+========================================================+\n");
	  printf("|%-10s %-10s %-10s %-10s %-12s|\n","L)ist","I)nsert","U)pdate","D)elete","E)xit");
	  printf("|%-10s %-10s %-10s %-10s %-12s|\n","f)irst","p)rev","n)ext","l)ast","S)et row");
	  printf("|%-55s|\n","J)ump page");
	  printf("+========================================================+\nChoose: ");
	  scanf("%s",&menu);
	  

	  switch(menu)
	  {
		case 'L': 

		 listAll();break;

		case 'E':

		 exit(0);break;

		case 'I':

		 insert();
		 listAll();break;

		case 'U':
	
		 update();
		 listAll();break;
		
		case 'D':

		 delete();
		 listAll();break;

		case 'p':

		 prev();break;
		
		case 'f':

		 first();break;

		case 'n':

		 next();break;
	
		case 'l':

		 last();break;
		
		case 'S':
			
		 setrow();break;

		case 'J':
	
		 jumpTo();break;

		default :break;

	  }
  
	}while(1);
	
 
 }
